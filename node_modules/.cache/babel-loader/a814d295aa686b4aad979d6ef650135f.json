{"ast":null,"code":"var _jsxFileName = \"/Users/colton/Documents/webdev/GitHub/Pizza-Time/src/Card.js\";\nimport React, { useState } from 'react';\nimport { PaymentInputsWrapper, usePaymentInputs } from 'react-payment-inputs';\nimport images from 'react-payment-inputs/images';\n\nfunction Card(props) {\n  const [name, nameChange] = useState('');\n  const [isName, changeIsName] = useState(true);\n  const {\n    meta,\n    wrapperProps,\n    getCardImageProps,\n    getCardNumberProps,\n    getExpiryDateProps,\n    getCVCProps\n  } = usePaymentInputs();\n\n  const validate = from => {\n    const errors = {};\n\n    if (meta.erroredInputs.cardNumber) {\n      errors.cardNumber = meta.erroredInputs.cardNumber;\n    }\n\n    if (meta.erroredInputs.expiryDate) {\n      errors.expiryDate = meta.erroredInputs.expiryDate;\n    }\n\n    if (meta.erroredInputs.cvc) {\n      errors.cvc = meta.erroredInputs.cvc;\n    }\n\n    if (name.length < 2 || name.length === undefined) {\n      errors.name = 'Not enough character in name';\n      changeIsName(false);\n    } else {\n      changeIsName(true);\n    }\n\n    if (from === 'pay' && Object.keys(errors).length === 0) {\n      props.finishOrder();\n      props.toggle();\n    }\n\n    return errors;\n  };\n\n  return React.createElement(\"div\", {\n    className: \"Card-main\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"Card-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"Close-card\",\n    onClick: () => props.toggle(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Close\")), React.createElement(\"div\", {\n    className: \"Card-input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(PaymentInputsWrapper, Object.assign({}, wrapperProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(\"svg\", Object.assign({}, getCardImageProps({\n    images\n  }), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })), React.createElement(\"input\", Object.assign({}, getCardNumberProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  })), React.createElement(\"input\", Object.assign({}, getExpiryDateProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })), React.createElement(\"input\", Object.assign({}, getCVCProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  })))), React.createElement(\"input\", {\n    className: \"Name\",\n    type: \"text\",\n    placeholder: \"Name on card\",\n    onChange: input => {\n      nameChange(input.target.value);\n      validate();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), !isName && React.createElement(\"span\", {\n    className: \"Name-error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Enter a name\"), React.createElement(\"button\", {\n    className: \"Pay\",\n    onClick: () => validate('pay'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Pay\"))));\n}\n\nexport default Card;","map":{"version":3,"sources":["/Users/colton/Documents/webdev/GitHub/Pizza-Time/src/Card.js"],"names":["React","useState","PaymentInputsWrapper","usePaymentInputs","images","Card","props","name","nameChange","isName","changeIsName","meta","wrapperProps","getCardImageProps","getCardNumberProps","getExpiryDateProps","getCVCProps","validate","from","errors","erroredInputs","cardNumber","expiryDate","cvc","length","undefined","Object","keys","finishOrder","toggle","input","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { PaymentInputsWrapper, usePaymentInputs } from 'react-payment-inputs';\nimport images from 'react-payment-inputs/images';\n\nfunction Card(props) {\n  const [name, nameChange] = useState('');\n  const [isName, changeIsName] = useState(true);\n\n  const {\n    meta,\n    wrapperProps,\n    getCardImageProps,\n    getCardNumberProps,\n    getExpiryDateProps,\n    getCVCProps,\n  } = usePaymentInputs();\n\n\n  const validate = (from) => {\n    const errors = {};\n    if (meta.erroredInputs.cardNumber) {\n      errors.cardNumber = meta.erroredInputs.cardNumber;\n    }\n    if (meta.erroredInputs.expiryDate) {\n      errors.expiryDate = meta.erroredInputs.expiryDate;\n    }\n    if (meta.erroredInputs.cvc) {\n      errors.cvc = meta.erroredInputs.cvc;\n    }\n    if (name.length < 2 || name.length === undefined) {\n      errors.name = 'Not enough character in name';\n      changeIsName(false);\n    } else {\n      changeIsName(true);\n    }\n    if (from === 'pay' && Object.keys(errors).length === 0) {\n      props.finishOrder();\n      props.toggle();\n    }\n    return errors;\n  };\n\n  return (\n    <div className=\"Card-main\">\n      <div className=\"Card-container\">\n        <button className=\"Close-card\" onClick={() => props.toggle()}><span>Close</span></button>\n        <div className=\"Card-input\">\n          <PaymentInputsWrapper {...wrapperProps}>\n            <svg {...getCardImageProps({ images })} />\n            <input {...getCardNumberProps()} />\n            <input {...getExpiryDateProps()} />\n            <input {...getCVCProps()} />\n          </PaymentInputsWrapper>\n        </div>\n        <input className=\"Name\" type=\"text\" placeholder=\"Name on card\" onChange={(input) => { nameChange(input.target.value); validate(); }} />\n        {!isName && <span className=\"Name-error\">Enter a name</span>}\n        <button className=\"Pay\" onClick={() => validate('pay')}><span>Pay</span></button>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}